#!/usr/bin/env python
import os
import logging
import numpy as np
import shredx
import fitsio
import argparse
import esutil as eu

logger = logging.getLogger(__name__)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--seg', required=True)
    parser.add_argument('--cat', required=True)
    parser.add_argument('--images', nargs='+', required=True)
    parser.add_argument('--psfs', nargs='+', required=True)
    parser.add_argument('--seed', type=int, required=True)
    parser.add_argument('--outfile', required=True)

    parser.add_argument('--fofs',
                        help=('if sent, used for group identification. '
                              'Otherwise it is assumed the fof '
                              'information is in the catalog'))

    parser.add_argument('--config', help='config file')
    parser.add_argument('--ids', help='file with ids to add to output')

    parser.add_argument('--start', type=int, default=None)
    parser.add_argument('--num', type=int, default=None)
    parser.add_argument('--fof-range', help='interval [start, end)')

    parser.add_argument('--show', action='store_true')
    parser.add_argument('--showonly', action='store_true')

    parser.add_argument('--loglevel', default='info')

    return parser.parse_args()


def get_fof_range(args):
    """
    get the fof range [start, end) from the full input
    fof range or from start/num
    """
    fof_range = []

    if args.fof_range is not None:
        fof_range = [int(t) for t in args.fof_range.split(',')]
    elif args.start is not None:
        assert args.num is not None,\
            'send --num with --start'
        fof_range = [args.start, args.start+args.num]
    return fof_range


def makedirs(args):
    """
    make the output directory
    """
    dirname = os.path.dirname(args.outfile)
    if dirname == '':
        return

    if not os.path.exists(dirname):
        os.makedirs(dirname, exist_ok=True)


def match_ids(cat, ids):
    """
    match the catalog to the ids catalog
    """
    mids, mcat = eu.numpy_util.match(ids['number'], cat['number'])

    if mcat.size != cat.size:
        raise ValueError('not all numbers matched to id catalog')

    return mids, mcat


def read_ids(args):
    """
    add id information to the output
    """

    if args.ids is not None:
        logger.info('reading ids from: %s' % args.ids)
        ids = fitsio.read(args.ids, lower=True)

        assert 'number' in ids.dtype.names
        assert 'id' in ids.dtype.names

        # do the match to catch the error now rather than running to the end
        # and failing then

        cat = fitsio.read(args.cat, lower=True)
        match_ids(cat, ids)

    else:
        ids = None

    return ids


def add_ids(cat, ids):
    """
    add id information to the output
    """

    logger.info('adding ids')

    mids, mcat = match_ids(cat, ids)
    cat['id'][mcat] = ids['id'][mids]

    return cat


def main():
    args = get_args()
    shredx.logging.setup_logging(args.loglevel)

    ids = read_ids(args)
    makedirs(args)

    logger.info('will write: %s' % args.outfile)

    config = shredx.get_config(config_file=args.config)

    fof_range = get_fof_range(args)

    rng = np.random.RandomState(args.seed)

    assert len(args.images) == len(args.psfs)

    loader = shredx.Loader(
        image_files=args.images,
        psf_files=args.psfs,
        seg_file=args.seg,
        cat_file=args.cat,
        zero_weight_badpix=config['data']['zero_weight_badpix'],
        rng=rng,
    )

    if args.fofs is not None:
        logger.info('adding fofs from %s' % args.fofs)
        fofs = fitsio.read(args.fofs)
        loader.add_fofs(fofs)

    output = shredx.shred_fofs(
        loader=loader,
        min_fofsize=config['fofs']['min_fofsize'],
        shredconf=config['shredding'],
        guess_model=config['guess']['model'],
        fof_range=fof_range,
        show=args.show,
        showonly=args.showonly,
        rng=rng,
        scale=0.1,
        width=1500,
    )

    if ids is not None:
        output = add_ids(output, ids)

    if not args.showonly:
        logger.info('writing to: %s' % args.outfile)
        fitsio.write(args.outfile, output, clobber=True)


if __name__ == '__main__':
    main()
